//@ts-nocheck

var ___defaultRules: DefaultRules = {
    Array: {
        react: function (arr, output, state) {
            var oldKey = state.key
            var result: Array<ReactElements> = []

            // map output over the ast, except group any text
            // nodes together into a single string output.
            for (var i = 0, key = 0; i < arr.length; i++, key++) {
                // `key` is our numerical `state.key`, which we increment for
                // every output node, but don't change for joined text nodes.
                // (i, however, must change for joined text nodes)
                state.key = "" + i

                var node = arr[i]
                if (node.type === "text") {
                    //node = { type: "text", content: node.content }
                    node = { ...node, type: "text" }
                    for (
                        ;
                        i + 1 < arr.length && arr[i + 1].type === "text";
                        i++
                    ) {
                        node.content += arr[i + 1].content
                    }
                }

                result.push(output(node, state))
            }

            state.key = oldKey
            return result
        },
        html: function (arr, output, state) {
            var result = ""

            // map output over the ast, except group any text
            // nodes together into a single string output.
            for (var i = 0; i < arr.length; i++) {
                var node = arr[i]
                if (node.type === "text") {
                    //node = { type: "text", content: node.content }
                    node = { ...node, type: "text" }
                    for (
                        ;
                        i + 1 < arr.length && arr[i + 1].type === "text";
                        i++
                    ) {
                        node.content += arr[i + 1].content
                    }
                }

                result += output(node, state)
            }
            return result
        },
    },
    heading: {
        order: currOrder++,
        match: blockRegex(/^ *(#{1,6})([^\n]+?)#* *(?:\n *)+\n/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by heading ----", param)
            return {
                level: capture[1].length,
                content: parseInline(
                    nestedParse,
                    capture[2].trim(),
                    state,
                    capture
                ),
            }
        },
        react: function (node, output, state) {
            return reactElement("h" + node.level, state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("h" + node.level, output(node.content, state))
        },
    },
    nptable: {
        order: currOrder++,
        match: blockRegex(TABLES.NPTABLE_REGEX),
        parse: TABLES.parseNpTable,
        react: null,
        html: null,
    },
    lheading: {
        order: currOrder++,
        match: blockRegex(/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return {
                type: "heading",
                level: capture[2] === "=" ? 1 : 2,
                content: parseInline(nestedParse, capture[1], state, capture),
            }
        },
        react: null,
        html: null,
    },
    hr: {
        order: currOrder++,
        match: blockRegex(/^( *[-*_]){3,} *(?:\n *)+\n/),
        parse: ignoreCapture,
        react: function (node, output, state) {
            return reactElement("hr", state.key, { "aria-hidden": true })
        },
        html: function (node, output, state) {
            return '<hr aria-hidden="true">'
        },
    },
    codeBlock: {
        order: currOrder++,
        match: blockRegex(/^(?:    [^\n]+\n*)+(?:\n *)+\n/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            var content = capture[0].replace(/^    /gm, "").replace(/\n+$/, "")
            return {
                lang: undefined,
                content: content,
            }
        },
        react: function (node, output, state) {
            var className = node.lang ? "markdown-code-" + node.lang : undefined

            return reactElement("pre", state.key, {
                children: reactElement("code", null, {
                    className: className,
                    children: node.content,
                }),
            })
        },
        html: function (node, output, state) {
            var className = node.lang ? "markdown-code-" + node.lang : undefined

            var codeBlock = htmlTag("code", sanitizeText(node.content), {
                class: className,
            })
            return htmlTag("pre", codeBlock)
        },
    },
    fence: {
        order: currOrder++,
        match: blockRegex(
            /^ *(`{3,}|~{3,}) *(?:(\S+) *)?\n([\s\S]+?)\n?\1 *(?:\n *)+\n/
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return {
                type: "codeBlock",
                lang: capture[2] || undefined,
                content: capture[3],
            }
        },
        react: null,
        html: null,
    },
    blockQuote: {
        order: currOrder++,
        match: blockRegex(/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            var content = capture[0].replace(/^ *> ?/gm, "")
            return {
                content: nestedParse(content, state, capture),
            }
        },
        react: function (node, output, state) {
            return reactElement("blockquote", state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("blockquote", output(node.content, state))
        },
    },
    list: {
        order: currOrder++,
        match: function (source, state) {
            // We only want to break into a list if we are at the start of a
            // line. This is to avoid parsing "hi * there" with "* there"
            // becoming a part of a list.
            // You might wonder, "but that's inline, so of course it wouldn't
            // start a list?". You would be correct! Except that some of our
            // lists can be inline, because they might be inside another list,
            // in which case we can nestedParse with inline scope, but need to allow
            // nested lists inside this inline scope.
            var prevCaptureStr =
                state.prevCapture == null ? "" : state.prevCapture[0]
            var isStartOfLineCapture = LIST_LOOKBEHIND_R.exec(prevCaptureStr)
            var isListBlock = state._list || !state.inline

            if (isStartOfLineCapture && isListBlock) {
                source = isStartOfLineCapture[1] + source
                return LIST_R.exec(source)
            } else {
                return null
            }
        },
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            var bullet = capture[2]
            let listType = ""
            let start = undefined
            if (!!IS_ORDERED_LIST_R.exec(bullet)) {
                listType = "ordered"
                start = +bullet
            } else if (!!IS_TASK_LIST_R.exec(bullet)) {
                listType = "task"
            }
            console.debug(`----captured by list (${listType}) ----`, param)
            // @ts-expect-error - TS2322 - Type 'RegExpMatchArray | null' is not assignable to type 'string[]'.
            var items: Array<string> = capture[0]
                .replace(LIST_BLOCK_END_R, "\n")
                .match(LIST_ITEM_R)

            // We know this will match here, because of how the regexes are
            // defined

            var lastItemWasAParagraph = false
            var itemContent = items.map(function (item: string, i: number) {
                // We need to see how far indented this item is:
                var prefixCapture = LIST_ITEM_PREFIX_R.exec(item)
                //orig//var space = prefixCapture ? prefixCapture[0].length : 0
                var space = prefixCapture ? prefixCapture[1].length : 0
                // And then we construct a regex to "unindent" the subsequent
                // lines of the items by that amount:
                var spaceRegex =
                    space > 0
                        ? new RegExp("^ {" + space + "}", "")
                        : new RegExp("")

                // Before processing the item, we need a couple things
                var content = item
                    // remove indents on trailing lines:
                    .replace(spaceRegex, "")
                    // remove the bullet:
                    .replace(LIST_ITEM_PREFIX_R, "")

                // I'm not sur4 why this is necessary again?

                // Handling "loose" lists, like:
                //
                //  * this is wrapped in a paragraph
                //
                //  * as is this
                //
                //  * as is this
                var isLastItem = i === items.length - 1
                var containsBlocks = content.indexOf("\n\n") !== -1

                // Any element in a list is a block if it contains multiple
                // newlines. The last element in the list can also be a block
                // if the previous item in the list was a block (this is
                // because non-last items in the list can end with \n\n, but
                // the last item can't, so we just "inherit" this property
                // from our previous element).
                var thisItemIsAParagraph =
                    containsBlocks || (isLastItem && lastItemWasAParagraph)
                lastItemWasAParagraph = thisItemIsAParagraph

                // backup our state for restoration afterwards. We're going to
                // want to set state._list to true, and state.inline depending
                // on our list's looseness.
                var oldStateInline = state.inline
                var oldStateList = state._list
                state._list = true

                // Parse inline if we're in a tight list, or block if we're in
                // a loose list.
                var adjustedContent
                if (thisItemIsAParagraph) {
                    state.inline = false
                    adjustedContent = content.replace(LIST_ITEM_END_R, "\n\n")
                } else {
                    state.inline = true
                    adjustedContent = content.replace(LIST_ITEM_END_R, "")
                }

                //
                //
                console.log(`LIST ItemContent LOOP[lv:${state.nestLevel}]:`, {
                    item,
                    space,
                    content,
                    adjustedContent,
                    capture,
                    prefixCapture,
                    spaceRegex,
                })

                var result = nestedParse(adjustedContent, state, capture)

                // Restore our state before returning
                state.inline = oldStateInline
                state._list = oldStateList
                return result
            })

            return {
                listType: listType,
                start: start,
                items: itemContent,
            }
        },
        react: function (node, output, state) {
            var ListWrapper = node.listType == "ordered" ? "ol" : "ul"

            return reactElement(ListWrapper, state.key, {
                start: node.start,
                children: node.items.map(function (item: ASTNode, i: number) {
                    if (node.listType == "task") {
                        return reactElement("input", "" + i, {
                            type: "checkbox",
                            children: output(item, state),
                        })
                    }
                    return reactElement("li", "" + i, {
                        children: output(item, state),
                    })
                }),
            })
        },
        html: function (node, output, state) {
            var listItems = node.items
                .map(function (item: ASTNode) {
                    return htmlTag("li", output(item, state))
                })
                .join("")

            var listTag = node.listType == "ordered" ? "ol" : "ul"
            var attributes = {
                start: node.start,
            }
            return htmlTag(listTag, listItems, attributes)
        },
    },
    def: {
        order: currOrder++,
        // _TODO(aria): This will match without a blank line before the next
        // block element, which is inconsistent with most of the rest of
        // simple-markdown.
        match: blockRegex(
            /^ *\[([^\]]+)\]: *<?([^\s>]*)>?(?: +["(]([^\n]+)[")])? *\n(?: *\n)*/
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            var def = capture[1].replace(/\s+/g, " ").toLowerCase()
            var target = capture[2]
            var title = capture[3]

            // Look for previous links/images using this def
            // If any links/images using this def have already been declared,
            // they will have added themselves to the state._refs[def] list
            // (_ to deconflict with client-defined state). We look through
            // that list of reflinks for this def, and modify those AST nodes
            // with our newly found information now.
            // Sorry :(.
            if (state._refs && state._refs[def]) {
                // `refNode` can be a link or an image
                state._refs[def].forEach(function (refNode: RefNode) {
                    refNode.target = target
                    refNode.title = title
                })
            }

            // Add this def to our map of defs for any future links/images
            // In case we haven't found any or all of the refs referring to
            // this def yet, we add our def to the table of known defs, so
            // that future reflinks can modify themselves appropriately with
            // this information.
            state._defs = state._defs || {}
            state._defs[def] = {
                target: target,
                title: title,
            }

            // return the relevant parsed information
            // for debugging only.
            return {
                def: def,
                target: target,
                title: title,
            }
        },
        react: function () {
            return null
        },
        html: function () {
            return ""
        },
    },
    table: {
        order: currOrder++,
        match: blockRegex(TABLES.TABLE_REGEX),
        parse: TABLES.parseTable,
        react: function (node, output, state) {
            var getStyle = function (colIndex: number): {
                [attr: string]: Attr
            } {
                return node.align[colIndex] == null
                    ? {}
                    : {
                          textAlign: node.align[colIndex],
                      }
            }

            var headers = node.header.map(function (
                content: ASTNode,
                i: number
            ) {
                return reactElement("th", "" + i, {
                    style: getStyle(i),
                    scope: "col",
                    children: output(content, state),
                })
            })

            var rows = node.cells.map(function (
                row: Array<ASTNode>,
                r: number
            ) {
                return reactElement("tr", "" + r, {
                    children: row.map(function (content: ASTNode, c: number) {
                        return reactElement("td", "" + c, {
                            style: getStyle(c),
                            children: output(content, state),
                        })
                    }),
                })
            })

            return reactElement("table", state.key, {
                children: [
                    reactElement("thead", "thead", {
                        children: reactElement("tr", null, {
                            children: headers,
                        }),
                    }),
                    reactElement("tbody", "tbody", {
                        children: rows,
                    }),
                ],
            })
        },
        html: function (node, output, state) {
            var getStyle = function (colIndex: number): string {
                return node.align[colIndex] == null
                    ? ""
                    : "text-align:" + node.align[colIndex] + ";"
            }

            var headers = node.header
                .map(function (content: ASTNode, i: number) {
                    return htmlTag("th", output(content, state), {
                        style: getStyle(i),
                        scope: "col",
                    })
                })
                .join("")

            var rows = node.cells
                .map(function (row: Array<ASTNode>) {
                    var cols = row
                        .map(function (content: ASTNode, c: number) {
                            return htmlTag("td", output(content, state), {
                                style: getStyle(c),
                            })
                        })
                        .join("")

                    return htmlTag("tr", cols)
                })
                .join("")

            var thead = htmlTag("thead", htmlTag("tr", headers))
            var tbody = htmlTag("tbody", rows)

            return htmlTag("table", thead + tbody)
        },
    },
    newline: {
        order: currOrder++,
        match: blockRegex(/^(?:\n *)*\n/),
        parse: ignoreCapture,
        react: function (node, output, state) {
            return "\n"
        },
        html: function (node, output, state) {
            return "\n"
        },
    },
    paragraph: {
        order: currOrder++,
        match: blockRegex(/^((?:[^\n]|\n(?! *\n))+)(?:\n *)+\n/),
        parse: parseCaptureInline,
        react: function (node, output, state) {
            return reactElement("div", state.key, {
                className: "paragraph",
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            var attributes = {
                class: "paragraph",
            }
            return htmlTag("div", output(node.content, state), attributes)
        },
    },
    escape: {
        order: currOrder++,
        // We don't allow escaping numbers, letters, or spaces here so that
        // backslashes used in plain text still get rendered. But allowing
        // escaping anything else provides a very flexible escape mechanism,
        // regardless of how this grammar is extended.
        match: inlineRegex(/^\\([^0-9A-Za-z\s])/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return {
                type: "text",
                content: capture[1],
            }
        },
        react: null,
        html: null,
    },
    tableSeparator: {
        order: currOrder++,
        match: function (source, state) {
            if (!state.inTable) {
                return null
            }
            return /^ *\| */.exec(source)
        },
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return { type: "tableSeparator" }
        },
        // These shouldn't be reached, but in case they are, be reasonable:
        react: function () {
            return " | "
        },
        html: function () {
            return " &vert; "
        },
    },
    autolink: {
        order: currOrder++,
        match: inlineRegex(/^<([^: >]+:\/[^ >]+)>/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return {
                type: "link",
                content: [
                    {
                        type: "text",
                        content: capture[1],
                    },
                ],
                target: capture[1],
            }
        },
        react: null,
        html: null,
    },
    mailto: {
        order: currOrder++,
        match: inlineRegex(/^<([^ >]+@[^ >]+)>/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            var address = capture[1]
            var target = capture[1]

            // Check for a `mailto:` already existing in the link:
            if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {
                target = "mailto:" + target
            }

            return {
                type: "link",
                content: [
                    {
                        type: "text",
                        content: address,
                    },
                ],
                target: target,
            }
        },
        react: null,
        html: null,
    },
    url: {
        order: currOrder++,
        match: inlineRegex(/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by ###----", param)
            return {
                type: "link",
                content: [
                    {
                        type: "text",
                        content: capture[1],
                    },
                ],
                target: capture[1],
                title: undefined,
            }
        },
        react: null,
        html: null,
    },
    link: {
        order: currOrder++,
        match: inlineRegex(
            new RegExp(
                "^\\[(" + LINK_INSIDE + ")\\]\\(" + LINK_HREF_AND_TITLE + "\\)"
            )
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by link ----", param)
            var link = {
                content: nestedParse(capture[1], state, capture),
                target: unescapeUrl(capture[2]),
                title: capture[3],
            }
            return link
        },
        react: function (node, output, state) {
            return reactElement("a", state.key, {
                href: sanitizeUrl(node.target),
                title: node.title,
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            var attributes = {
                href: sanitizeUrl(node.target),
                title: node.title,
            }

            return htmlTag("a", output(node.content, state), attributes)
        },
    },
    image: {
        order: currOrder++,
        match: inlineRegex(
            new RegExp(
                "^!\\[(" + LINK_INSIDE + ")\\]\\(" + LINK_HREF_AND_TITLE + "\\)"
            )
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by image ----", param)
            var image = {
                alt: capture[1],
                target: unescapeUrl(capture[2]),
                title: capture[3],
            }
            return image
        },
        react: function (node, output, state) {
            return reactElement("img", state.key, {
                src: sanitizeUrl(node.target),
                alt: node.alt,
                title: node.title,
            })
        },
        html: function (node, output, state) {
            var attributes = {
                src: sanitizeUrl(node.target),
                alt: node.alt,
                title: node.title,
            }

            return htmlTag("img", "", attributes, false)
        },
    },
    reflink: {
        order: currOrder++,
        match: inlineRegex(
            new RegExp(
                // The first [part] of the link
                "^\\[(" +
                    LINK_INSIDE +
                    ")\\]" +
                    // The [ref] target of the link
                    "\\s*\\[([^\\]]*)\\]"
            )
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by reflink ----", param)
            return parseRef(capture, state, {
                type: "link",
                content: nestedParse(capture[1], state, capture),
            })
        },
        react: null,
        html: null,
    },
    refimage: {
        order: currOrder++,
        match: inlineRegex(
            new RegExp(
                // The first [part] of the link
                "^!\\[(" +
                    LINK_INSIDE +
                    ")\\]" +
                    // The [ref] target of the link
                    "\\s*\\[([^\\]]*)\\]"
            )
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by refimage ----", param)
            return parseRef(capture, state, {
                type: "image",
                alt: capture[1],
            })
        },
        react: null,
        html: null,
    },
    em: {
        order: currOrder /* same as strong/u */,
        match: inlineRegex(
            new RegExp(
                // only match _s surrounding words.
                "^\\b_" +
                    "((?:__|\\\\[\\s\\S]|[^\\\\_])+?)_" +
                    "\\b" +
                    // Or match *s:
                    "|" +
                    // Only match *s that are followed by a non-space:
                    "^\\*(?=\\S)(" +
                    // Match at least one of:
                    "(?:" +
                    //  - `**`: so that bolds inside italics don't close the
                    //          italics
                    "\\*\\*|" +
                    //  - escape sequence: so escaped *s don't close us
                    "\\\\[\\s\\S]|" +
                    //  - whitespace: followed by a non-* (we don't
                    //          want ' *' to close an italics--it might
                    //          start a list)
                    "\\s+(?:\\\\[\\s\\S]|[^\\s\\*\\\\]|\\*\\*)|" +
                    //  - non-whitespace, non-*, non-backslash characters
                    "[^\\s\\*\\\\]" +
                    ")+?" +
                    // followed by a non-space, non-* then *
                    ")\\*(?!\\*)"
            )
        ),
        quality: function (capture) {
            // precedence by length, `em` wins ties:
            return capture[0].length + 0.2
        },
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by em ----", param)
            //
            const nestedSource = capture[2] || capture[1]
            /*
            const shift = capture[0].indexOf(nestedSource)
            shiftGlobalPosition(state, shift)
            */
            //
            return {
                content: nestedParse(nestedSource, state, capture),
            }
        },
        react: function (node, output, state) {
            return reactElement("em", state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("em", output(node.content, state))
        },
    },
    strong: {
        order: currOrder /* same as em */,
        match: inlineRegex(/^\*\*((?:\\[\s\S]|[^\\])+?)\*\*(?!\*)/),
        quality: function (capture) {
            // precedence by length, wins ties vs `u`:
            return capture[0].length + 0.1
        },
        parse: parseCaptureInline,
        react: function (node, output, state) {
            return reactElement("strong", state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("strong", output(node.content, state))
        },
    },
    u: {
        order: currOrder++ /* same as em&strong; increment for next rule */,
        match: inlineRegex(/^__((?:\\[\s\S]|[^\\])+?)__(?!_)/),
        quality: function (capture) {
            // precedence by length, loses all ties
            return capture[0].length
        },
        parse: parseCaptureInline,
        react: function (node, output, state) {
            return reactElement("u", state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("u", output(node.content, state))
        },
    },
    del: {
        order: currOrder++,
        match: inlineRegex(
            /^~~(?=\S)((?:\\[\s\S]|~(?!~)|[^\s~\\]|\s(?!~~))+?)~~/
        ),
        parse: parseCaptureInline,
        react: function (node, output, state) {
            return reactElement("del", state.key, {
                children: output(node.content, state),
            })
        },
        html: function (node, output, state) {
            return htmlTag("del", output(node.content, state))
        },
    },
    inlineCode: {
        order: currOrder++,
        match: inlineRegex(/^(`+)([\s\S]*?[^`])\1(?!`)/),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by inlineCode----", param)
            return {
                content: capture[2].replace(
                    INLINE_CODE_ESCAPE_BACKTICKS_R,
                    "$1"
                ),
            }
        },
        react: function (node, output, state) {
            return reactElement("code", state.key, {
                children: node.content,
            })
        },
        html: function (node, output, state) {
            return htmlTag("code", sanitizeText(node.content))
        },
    },
    br: {
        order: currOrder++,
        match: anyScopeRegex(/^ {2,}\n/),
        parse: ignoreCapture,
        react: function (node, output, state) {
            return reactElement("br", state.key, EMPTY_PROPS)
        },
        html: function (node, output, state) {
            return "<br>"
        },
    },
    text: {
        order: currOrder++,
        // Here we look for anything followed by non-symbols,
        // double newlines, or double-space-newlines
        // We break on any symbol characters so that this grammar
        // is easy to extend without needing to modify this regex
        //orig    /^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|$)/
        match: anyScopeRegex(
            /^[\s\S]+?(?=\s*(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|$))/
        ),
        parse: function (capture, nestedParse, state) {
            const param = Object.assign({}, { capture, nestedParse, state })
            console.debug("----captured by text----", param)
            return {
                content: capture[0],
            }
        },
        react: function (node, output, state) {
            return reactElement("span", state.key, {
                children: node.content,
                className: "previewText",
                "data-pos": node.pos,
            })
        },
        html: function (node, output, state) {
            return sanitizeText(node.content)
        },
    },
}
